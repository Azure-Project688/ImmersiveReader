<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="shortcut icon"
      href="../assets/images/favicon.png"
      type="image/x-icon"
    />
    <link rel="stylesheet" href="../assets/style/style.css" />
    <title>Magic Reader</title>
  </head>
  <body>
    <%- include('header'); %>
    <section class="text-gray-600 body-font">
      <div class="container px-5 py-24 mx-auto">
        <div class="p-4">
          <div
            class="flex border-2 rounded-lg border-gray-200 border-opacity-50 p-8 sm:flex-row flex-col"
            style="box-shadow: 5px 5px 5px 2px lightgreen"
          >
            <div
              class="w-16 h-16 sm:mr-8 sm:mb-0 mb-4 inline-flex items-center justify-center rounded-full bg-green-100 text-green-500 flex-shrink-0"
            >
              <svg
                fill="none"
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                class="w-10 h-10"
                viewBox="0 0 24 24"
              >
                <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
            </div>
            <div class="flex-grow sm:w-full">
              <h2 class="text-gray-900 text-lg title-font font-medium mb-3">
                Input Window
              </h2>
              <hr class="mb-3" />
              <input
                type="text"
                id="texttitle"
                placeholder="Enter your title here..."
                class="mb-3 shadow appearance-none border rounded w-full sm:max-w-sm py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              />
              <br />
              <div
                class="shadow appearance-none border rounded w-full sm:max-w-sm py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                contenteditable="true"
                id="editable"
              ></div>

              <a
                id="launch-button"
                class="mt-3 text-white bg-blue-500 inline-flex items-center hover:bg-green-500 hover:text-white"
              >
                Launch Reader
                <!-- <svg
                  fill="none"
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  class="w-4 h-4 ml-2"
                  viewBox="0 0 24 24"
                > 
                  <path d="M5 12h14M12 5l7 7-7 7"></path>
                </svg> -->
              </a>

              <a
                id="clear-button"
                class="mt-3 ml-3 text-red-500 bg-red-200 inline-flex items-center hover:bg-red-500 hover:text-white"
                onclick="clearEditable()"
                >Clear</a
              >
            </div>
          </div>
        </div>
      </div>
    </section>

    <%- include('footer'); %>
    <script src="https://cdn.jsdelivr.net/npm/promise-polyfill@8/dist/polyfill.min.js"></script>
    <script src="https://ircdname.azureedge.net/immersivereadersdk/immersive-reader-sdk.1.4.0.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script>
      function getTokenAndSubdomainAsync() {
        return new Promise(function (resolve, reject) {
          $.ajax({
            url: "/GetTokenAndSubdomain",
            type: "GET",
            success: function (data) {
              if (data.error) {
                reject(data.error);
              } else {
                resolve(data);
              }
            },
            error: function (err) {
              reject(err);
            },
          });
        });
      }

      document.getElementById("launch-button").onclick = function () {
        trimContentToLimit();

        // Check if the user is allowed to launch
        fetchLaunchCount()
          .then((launchCount) => {
            if (launchCount < 3) {
              incrementLaunchCount(); // Increment launch count on the server
              handleLaunchImmersiveReader();
            } else {
              alert("Launch limit reached.");
              // Handle the case when the launch limit is reached
            }
          })
          .catch((error) => {
            console.error("Error fetching launch count:", error);
            // Handle error (show an error message, redirect, etc.)
          });
      };

      function fetchLaunchCount() {
        // Make an AJAX request to the server to fetch the launch count
        return new Promise((resolve, reject) => {
          $.ajax({
            url: "/getLaunchCount",
            type: "GET",
            success: function (data) {
              if (data.launchCount !== undefined) {
                resolve(data.launchCount);
              } else {
                reject("Launch count not available in the response.");
              }
            },
            error: function (err) {
              reject(err);
            },
          });
        });
      }

      function incrementLaunchCount() {
        // Make an AJAX request to the server to increment the launch count
        $.ajax({
          url: "/incrementLaunchCount",
          type: "GET",
          success: function (data) {
            if (data.success) {
              // console.log("Launch count incremented successfully.");
            } else {
              console.error("Failed to increment launch count.");
            }
          },
          error: function (err) {
            console.error("Error incrementing launch count:", err);
          },
        });
      }

      function handleLaunchImmersiveReader() {
        getTokenAndSubdomainAsync()
          .then(function (response) {
            const token = response["token"];
            const subdomain = response["subdomain"];
            // Learn more about chunk usage and supported MIME types https://learn.microsoft.com/azure/ai-services/immersive-reader/reference#chunk
            const data = {
              title: $("#texttitle").text(),
              chunks: [
                {
                  content: $("#editable").html(),
                  mimeType: "text/html",
                },
              ],
            };
            // Learn more about options https://learn.microsoft.com/azure/ai-services/immersive-reader/reference#options
            const options = {
              onExit: exitCallback,
              uiZIndex: 2000,
            };
            ImmersiveReader.launchAsync(token, subdomain, data, options).catch(
              function (error) {
                alert(
                  "Error in launching the Immersive Reader. Check the console."
                );
                console.log(error);
              }
            );
          })
          .catch(function (error) {
            alert(
              "Error in getting the Immersive Reader token and subdomain. Check the console."
            );
            console.log(error);
          });
      }

      function exitCallback() {
        console.log(
          "This is the callback function. It is executed when the Immersive Reader closes."
        );
      }

      function trimContentToLimit() {
        var editable = document.getElementById("editable");
        var content = editable.innerText;
        var wordLimit = 300;

        var words = content.split(/\s+/).length;

        // Replace '\n' with '<br>' to preserve line breaks
        content = content.replace(/\n/g, "<br>");

        if (words > wordLimit) {
          // Trim excess words
          var trimmedContent = content
            .split(/\s+/)
            .slice(0, wordLimit)
            .join(" ");
          editable.innerHTML = trimmedContent;
        }
      }

      function clearEditable() {
        var editable = document.getElementById("editable");
        editable.innerHTML = "";
      }
    </script>
  </body>
</html>
